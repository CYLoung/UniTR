2024-08-24 12:01:07,770   INFO  **********************Start logging**********************
2024-08-24 12:01:07,770   INFO  CUDA_VISIBLE_DEVICES=ALL
2024-08-24 12:01:07,770   INFO  Training in distributed mode : total_batch_size: 1
2024-08-24 12:01:07,770   INFO  cfg_file         ./cfgs/nuscenes_models/unitr_map.yaml
2024-08-24 12:01:07,770   INFO  batch_size       1
2024-08-24 12:01:07,770   INFO  epochs           20
2024-08-24 12:01:07,770   INFO  workers          4
2024-08-24 12:01:07,770   INFO  extra_tag        default
2024-08-24 12:01:07,770   INFO  ckpt             None
2024-08-24 12:01:07,770   INFO  pretrained_model None
2024-08-24 12:01:07,770   INFO  launcher         pytorch
2024-08-24 12:01:07,770   INFO  tcp_port         18888
2024-08-24 12:01:07,770   INFO  sync_bn          True
2024-08-24 12:01:07,770   INFO  fix_random_seed  False
2024-08-24 12:01:07,770   INFO  ckpt_save_interval 1
2024-08-24 12:01:07,770   INFO  local_rank       0
2024-08-24 12:01:07,770   INFO  max_ckpt_save_num 30
2024-08-24 12:01:07,770   INFO  merge_all_iters_to_one_epoch False
2024-08-24 12:01:07,770   INFO  set_cfgs         None
2024-08-24 12:01:07,770   INFO  max_waiting_mins 0
2024-08-24 12:01:07,770   INFO  start_epoch      0
2024-08-24 12:01:07,770   INFO  num_epochs_to_eval 0
2024-08-24 12:01:07,770   INFO  save_to_file     False
2024-08-24 12:01:07,770   INFO  use_tqdm_to_record False
2024-08-24 12:01:07,770   INFO  logger_iter_interval 1000
2024-08-24 12:01:07,770   INFO  ckpt_save_time_interval 300
2024-08-24 12:01:07,770   INFO  wo_gpu_stat      False
2024-08-24 12:01:07,770   INFO  use_amp          False
2024-08-24 12:01:07,770   INFO  eval_map         True
2024-08-24 12:01:07,770   INFO  cfg.ROOT_DIR: /root/src/UniTR
2024-08-24 12:01:07,770   INFO  cfg.LOCAL_RANK: 0
2024-08-24 12:01:07,770   INFO  cfg.CLASS_NAMES: ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']
2024-08-24 12:01:07,770   INFO  ----------- DATA_CONFIG -----------
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.DATASET: NuScenesDataset
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.DATA_PATH: /root/src/nuScenes
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.VERSION: v1.0-mini
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.MAX_SWEEPS: 10
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.PRED_VELOCITY: True
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.SET_NAN_VELOCITY_TO_ZEROS: True
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.FILTER_MIN_POINTS_IN_GT: 1
2024-08-24 12:01:07,770   INFO  ----------- DATA_SPLIT -----------
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2024-08-24 12:01:07,770   INFO  ----------- INFO_PATH -----------
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['/root/src/nuScenes/v1.0-mini/nuscenes_infos_10sweeps_train.pkl']
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['/root/src/nuScenes/v1.0-mini/nuscenes_infos_10sweeps_val.pkl']
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.BALANCED_RESAMPLING: False
2024-08-24 12:01:07,770   INFO  ----------- DATA_AUGMENTOR -----------
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2024-08-24 12:01:07,770   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_translation', 'NOISE_TRANSLATE_STD': [0.5, 0.5, 0.5]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.9, 1.1]}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x', 'y']}, {'NAME': 'imgaug', 'ROT_LIM': [-5.4, 5.4], 'RAND_FLIP': True}]
2024-08-24 12:01:07,771   INFO  ----------- POINT_FEATURE_ENCODING -----------
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity', 'timestamp']
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity', 'timestamp']
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels_placeholder', 'VOXEL_SIZE': [0.4, 0.4, 8.0]}, {'NAME': 'image_calibrate'}, {'NAME': 'image_normalize', 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], 'bgr2rgb': True}, {'NAME': 'load_bev_segmentation', 'classes': ['drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area', 'divider'], 'xbound': [-50.0, 50.0, 0.5], 'ybound': [-50.0, 50.0, 0.5], 'dataset_root': '/root/src/nuScenes/v1.0-mini', 'location': ['singapore-onenorth', 'singapore-hollandvillage', 'singapore-queenstown', 'boston-seaport']}]
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/nuscenes_dataset.yaml
2024-08-24 12:01:07,771   INFO  ----------- CAMERA_CONFIG -----------
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.CAMERA_CONFIG.USE_CAMERA: True
2024-08-24 12:01:07,771   INFO  ----------- IMAGE -----------
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.CAMERA_CONFIG.IMAGE.FINAL_DIM: [256, 704]
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.CAMERA_CONFIG.IMAGE.RESIZE_LIM_TRAIN: [0.38, 0.55]
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.CAMERA_CONFIG.IMAGE.RESIZE_LIM_TEST: [0.48, 0.48]
2024-08-24 12:01:07,771   INFO  ----------- MAP_CONFIG -----------
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.MAP_CONFIG.USE_MAP: True
2024-08-24 12:01:07,771   INFO  cfg.DATA_CONFIG.MAP_CONFIG.CLASS_NAMES: ['drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area', 'divider']
2024-08-24 12:01:07,771   INFO  ----------- MODEL -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.NAME: UniTRMAP
2024-08-24 12:01:07,771   INFO  ----------- MM_BACKBONE -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.NAME: UniTR
2024-08-24 12:01:07,771   INFO  ----------- PATCH_EMBED -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.num_frames: 5
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.in_channels: 3
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.image_size: [256, 704]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.embed_dims: 128
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.patch_size: 8
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.patch_norm: True
2024-08-24 12:01:07,771   INFO  ----------- norm_cfg -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.norm_cfg.type: LN
2024-08-24 12:01:07,771   INFO  ----------- IMAGE_INPUT_LAYER -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.sparse_shape: [32, 88, 1]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.d_model: [128]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.set_info: [[90, 4]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.window_shape: [[30, 30, 1]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.hybrid_factor: [1, 1, 1]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.shifts_list: [[[0, 0, 0], [15, 15, 0]]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.input_image: True
2024-08-24 12:01:07,771   INFO  ----------- LIDAR_INPUT_LAYER -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.sparse_shape: [256, 256, 1]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.d_model: [128]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.set_info: [[90, 4]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.window_shape: [[30, 30, 1]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.hybrid_factor: [1, 1, 1]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.shifts_list: [[[0, 0, 0], [15, 15, 0]]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.set_info: [[90, 4]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.d_model: [128]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.nhead: [8]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.dim_feedforward: [256]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.dropout: 0.0
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.activation: gelu
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.checkpoint_blocks: [0, 1, 2, 3]
2024-08-24 12:01:07,771   INFO  ----------- layer_cfg -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.layer_cfg.use_bn: False
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.layer_cfg.split_ffn: True
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.layer_cfg.split_residual: True
2024-08-24 12:01:07,771   INFO  ----------- FUSE_BACKBONE -----------
2024-08-24 12:01:07,771   INFO  ----------- IMAGE2LIDAR -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.block_start: 3
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.block_end: 4
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.point_cloud_range: [-51.2, -51.2, -10.0, 51.2, 51.2, 10.0]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.voxel_size: [0.4, 0.4, 20.0]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.sample_num: 20
2024-08-24 12:01:07,771   INFO  ----------- image2lidar_layer -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.image2lidar_layer.sparse_shape: [256, 256, 1]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.image2lidar_layer.d_model: [128]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.image2lidar_layer.set_info: [[90, 1]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.image2lidar_layer.window_shape: [[30, 30, 1]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.image2lidar_layer.hybrid_factor: [1, 1, 1]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.image2lidar_layer.shifts_list: [[[0, 0, 0], [15, 15, 0]]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.IMAGE2LIDAR.image2lidar_layer.expand_max_voxels: 10
2024-08-24 12:01:07,771   INFO  ----------- LIDAR2IMAGE -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.block_start: 1
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.block_end: 3
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.point_cloud_range: [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.voxel_size: [0.4, 0.4, 8.0]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.sample_num: 1
2024-08-24 12:01:07,771   INFO  ----------- lidar2image_layer -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.lidar2image_layer.sparse_shape: [96, 264, 6]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.lidar2image_layer.d_model: [128]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.lidar2image_layer.set_info: [[90, 2]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.lidar2image_layer.window_shape: [[30, 30, 1]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.lidar2image_layer.hybrid_factor: [1, 1, 1]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.lidar2image_layer.shifts_list: [[[0, 0, 0], [15, 15, 0]]]
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.FUSE_BACKBONE.LIDAR2IMAGE.lidar2image_layer.expand_max_voxels: 30
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MM_BACKBONE.out_indices: []
2024-08-24 12:01:07,771   INFO  ----------- VFE -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.VFE.NAME: DynPillarVFE
2024-08-24 12:01:07,771   INFO  cfg.MODEL.VFE.WITH_DISTANCE: False
2024-08-24 12:01:07,771   INFO  cfg.MODEL.VFE.USE_ABSLOTE_XYZ: True
2024-08-24 12:01:07,771   INFO  cfg.MODEL.VFE.USE_NORM: True
2024-08-24 12:01:07,771   INFO  cfg.MODEL.VFE.NUM_FILTERS: [128, 128]
2024-08-24 12:01:07,771   INFO  ----------- MAP_TO_BEV -----------
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MAP_TO_BEV.NAME: PointPillarScatter3d
2024-08-24 12:01:07,771   INFO  cfg.MODEL.MAP_TO_BEV.INPUT_SHAPE: [256, 256, 1]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 128
2024-08-24 12:01:07,772   INFO  ----------- BACKBONE_2D -----------
2024-08-24 12:01:07,772   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2024-08-24 12:01:07,772   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [5, 5, 5, 5]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [2, 2, 2, 2]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [128, 256, 256, 256]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2, 4, 8]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [256, 256, 256, 256]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.BACKBONE_2D.USE_CONV_FOR_NO_STRIDE: True
2024-08-24 12:01:07,772   INFO  ----------- TSA_LAYER -----------
2024-08-24 12:01:07,772   INFO  cfg.MODEL.TSA_LAYER.NAME: TSALayer
2024-08-24 12:01:07,772   INFO  cfg.MODEL.TSA_LAYER.EMBED_DIM: 128
2024-08-24 12:01:07,772   INFO  cfg.MODEL.TSA_LAYER.NUM_HEADS: 8
2024-08-24 12:01:07,772   INFO  cfg.MODEL.TSA_LAYER.NUM_LEVELS: 4
2024-08-24 12:01:07,772   INFO  cfg.MODEL.TSA_LAYER.NUM_POINTS: 4
2024-08-24 12:01:07,772   INFO  cfg.MODEL.TSA_LAYER.SEQUENCE_LENGTH: 5
2024-08-24 12:01:07,772   INFO  cfg.MODEL.TSA_LAYER.SPATIAL_SHAPES: [[30, 30, 1]]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.TSA_LAYER.LEVEL_START_INDEX: [0]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.TSA_LAYER.REFERENCE_POINTS: [[15, 15, 0]]
2024-08-24 12:01:07,772   INFO  ----------- DENSE_HEAD -----------
2024-08-24 12:01:07,772   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2024-08-24 12:01:07,772   INFO  cfg.MODEL.DENSE_HEAD.NAME: BEVSegmentationHead
2024-08-24 12:01:07,772   INFO  ----------- GRID_TRANSFORM -----------
2024-08-24 12:01:07,772   INFO  cfg.MODEL.DENSE_HEAD.GRID_TRANSFORM.INPUT_SCOPE: [[-51.2, 51.2, 0.8], [-51.2, 51.2, 0.8]]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.DENSE_HEAD.GRID_TRANSFORM.OUTPUT_SCOPE: [[-50, 50, 0.5], [-50, 50, 0.5]]
2024-08-24 12:01:07,772   INFO  ----------- LOSS_CONFIG -----------
2024-08-24 12:01:07,772   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.gamma: 2.0
2024-08-24 12:01:07,772   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.alpha: -1
2024-08-24 12:01:07,772   INFO  ----------- POST_PROCESSING -----------
2024-08-24 12:01:07,772   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2024-08-24 12:01:07,772   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2024-08-24 12:01:07,772   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2024-08-24 12:01:07,772   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: nuscenes
2024-08-24 12:01:07,772   INFO  ----------- NMS_CONFIG -----------
2024-08-24 12:01:07,772   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: True
2024-08-24 12:01:07,772   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2024-08-24 12:01:07,772   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.2
2024-08-24 12:01:07,772   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 1000
2024-08-24 12:01:07,772   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 83
2024-08-24 12:01:07,772   INFO  ----------- OPTIMIZATION -----------
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 1
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 20
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.LR: 0.001
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2024-08-24 12:01:07,772   INFO  cfg.OPTIMIZATION.LOSS_SCALE_FP16: 32
2024-08-24 12:01:07,772   INFO  cfg.TAG: unitr_map
2024-08-24 12:01:07,772   INFO  cfg.EXP_GROUP_PATH: cfgs/nuscenes_models
2024-08-24 12:01:07,779   INFO  ----------- Create dataloader & network & optimizer -----------
2024-08-24 12:01:08,213   INFO  Loading NuScenes dataset
2024-08-24 12:01:08,213   INFO  Checking info path: /root/src/nuScenes/v1.0-mini/nuscenes_infos_10sweeps_train.pkl
2024-08-24 12:01:08,231   INFO  Total samples for NuScenes dataset: 323
2024-08-24 12:01:10,743   INFO  ----------- Model UniTRMAP created, param count: 37674950 -----------
2024-08-24 12:01:10,743   INFO  DistributedDataParallel(
  (module): UniTRMAP(
    (vfe): DynamicPillarVFE(
      (pfn_layers): ModuleList(
        (0): PFNLayerV2(
          (linear): Linear(in_features=11, out_features=64, bias=False)
          (norm): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
        )
        (1): PFNLayerV2(
          (linear): Linear(in_features=128, out_features=128, bias=False)
          (norm): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
        )
      )
    )
    (mm_backbone): UniTR(
      (image_input_layer): UniTRInputLayer(
        (posembed_layers): ModuleList(
          (0): ModuleList(
            (0): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
            (1): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
            (2): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
            (3): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
          )
        )
      )
      (lidar_input_layer): UniTRInputLayer(
        (posembed_layers): ModuleList(
          (0): ModuleList(
            (0): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
            (1): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
            (2): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
            (3): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
          )
        )
      )
      (patch_embed): PatchEmbed(
        (adap_padding): AdaptivePadding()
        (projection): Conv2d(3, 128, kernel_size=(8, 8), stride=(8, 8))
        (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      )
      (stage_0): ModuleList(
        (0): UniTRBlock(
          (encoder_list): ModuleList(
            (0): UniTR_EncoderLayer(
              (win_attn): SetAttention(
                (self_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (linear1): Linear(in_features=128, out_features=256, bias=True)
                (dropout): Dropout(p=0, inplace=False)
                (linear2): Linear(in_features=256, out_features=128, bias=True)
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
                (lidar_dropout): Dropout(p=0, inplace=False)
                (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
                (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (dropout1): Identity()
                (dropout2): Identity()
              )
              (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            )
            (1): UniTR_EncoderLayer(
              (win_attn): SetAttention(
                (self_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (linear1): Linear(in_features=128, out_features=256, bias=True)
                (dropout): Dropout(p=0, inplace=False)
                (linear2): Linear(in_features=256, out_features=128, bias=True)
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
                (lidar_dropout): Dropout(p=0, inplace=False)
                (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
                (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (dropout1): Identity()
                (dropout2): Identity()
              )
              (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (1): UniTRBlock(
          (encoder_list): ModuleList(
            (0): UniTR_EncoderLayer(
              (win_attn): SetAttention(
                (self_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (linear1): Linear(in_features=128, out_features=256, bias=True)
                (dropout): Dropout(p=0, inplace=False)
                (linear2): Linear(in_features=256, out_features=128, bias=True)
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
                (lidar_dropout): Dropout(p=0, inplace=False)
                (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
                (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (dropout1): Identity()
                (dropout2): Identity()
              )
              (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            )
            (1): UniTR_EncoderLayer(
              (win_attn): SetAttention(
                (self_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (linear1): Linear(in_features=128, out_features=256, bias=True)
                (dropout): Dropout(p=0, inplace=False)
                (linear2): Linear(in_features=256, out_features=128, bias=True)
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
                (lidar_dropout): Dropout(p=0, inplace=False)
                (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
                (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (dropout1): Identity()
                (dropout2): Identity()
              )
              (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (2): UniTRBlock(
          (encoder_list): ModuleList(
            (0): UniTR_EncoderLayer(
              (win_attn): SetAttention(
                (self_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (linear1): Linear(in_features=128, out_features=256, bias=True)
                (dropout): Dropout(p=0, inplace=False)
                (linear2): Linear(in_features=256, out_features=128, bias=True)
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
                (lidar_dropout): Dropout(p=0, inplace=False)
                (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
                (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (dropout1): Identity()
                (dropout2): Identity()
              )
              (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            )
            (1): UniTR_EncoderLayer(
              (win_attn): SetAttention(
                (self_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (linear1): Linear(in_features=128, out_features=256, bias=True)
                (dropout): Dropout(p=0, inplace=False)
                (linear2): Linear(in_features=256, out_features=128, bias=True)
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
                (lidar_dropout): Dropout(p=0, inplace=False)
                (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
                (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (dropout1): Identity()
                (dropout2): Identity()
              )
              (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (3): UniTRBlock(
          (encoder_list): ModuleList(
            (0): UniTR_EncoderLayer(
              (win_attn): SetAttention(
                (self_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (linear1): Linear(in_features=128, out_features=256, bias=True)
                (dropout): Dropout(p=0, inplace=False)
                (linear2): Linear(in_features=256, out_features=128, bias=True)
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
                (lidar_dropout): Dropout(p=0, inplace=False)
                (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
                (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (dropout1): Identity()
                (dropout2): Identity()
              )
              (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            )
            (1): UniTR_EncoderLayer(
              (win_attn): SetAttention(
                (self_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (linear1): Linear(in_features=128, out_features=256, bias=True)
                (dropout): Dropout(p=0, inplace=False)
                (linear2): Linear(in_features=256, out_features=128, bias=True)
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
                (lidar_dropout): Dropout(p=0, inplace=False)
                (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
                (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (dropout1): Identity()
                (dropout2): Identity()
              )
              (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (residual_norm_stage_0): ModuleList(
        (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      )
      (lidar_residual_norm_stage_0): ModuleList(
        (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        (3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      )
      (map_image2lidar_layer): MapImage2Lidar()
      (image2lidar_input_layer): UniTRInputLayer(
        (posembed_layers): ModuleList(
          (0): ModuleList(
            (0): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=2, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
          )
        )
      )
      (neighbor_pos_embed): PositionEmbeddingLearned(
        (position_embedding_head): Sequential(
          (0): Linear(in_features=2, out_features=128, bias=True)
          (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=128, out_features=128, bias=True)
        )
      )
      (map_lidar2image_layer): MapLidar2Image()
      (lidar2image_input_layer): UniTRInputLayer(
        (posembed_layers): ModuleList(
          (0): ModuleList(
            (0): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=3, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=3, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
            (1): ModuleList(
              (0): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=3, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
              (1): PositionEmbeddingLearned(
                (position_embedding_head): Sequential(
                  (0): Linear(in_features=3, out_features=128, bias=True)
                  (1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=128, out_features=128, bias=True)
                )
              )
            )
          )
        )
      )
    )
    (map_to_bev_module): PointPillarScatter3d()
    (neck): None
    (vtransform): None
    (fuser): None
    (backbone_2d): BaseBEVBackbone(
      (blocks): ModuleList(
        (0): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
          (16): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (17): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (18): ReLU()
        )
        (1): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
          (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (17): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (18): ReLU()
        )
        (2): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
          (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (17): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (18): ReLU()
        )
        (3): Sequential(
          (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (3): ReLU()
          (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (6): ReLU()
          (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (8): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (9): ReLU()
          (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (11): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (12): ReLU()
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (14): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (15): ReLU()
          (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (17): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (18): ReLU()
        )
      )
      (deblocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (2): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(4, 4), bias=False)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (3): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(8, 8), stride=(8, 8), bias=False)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (tsa_layer): TSALayer(
      (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (dense_head): BEVSegmentationHead(
      (transform): BEVGridTransform()
      (classifier): Sequential(
        (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(1024, 6, kernel_size=(1, 1), stride=(1, 1))
      )
      (loss_cls): SigmoidFocalClassificationLoss()
    )
  )
)
2024-08-24 12:01:10,746   INFO  **********************Start training cfgs/nuscenes_models/unitr_map(default)**********************
